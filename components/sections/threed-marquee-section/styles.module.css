.window {
  height: 450px;
  max-width: 1000px;
  margin: auto;
  container-type: inline-size;
  transform-style: preserve-3d;
  width: 100%;
  outline: 4px dashed transparent;
  transition: outline 0.5s;
}

.scene {
  --buff: 3rem;
  height: 100%;
  width: 100%;
  mask: linear-gradient(
      transparent,
      white var(--buff) calc(100% - var(--buff)),
      transparent
    ),
    linear-gradient(
      90deg,
      transparent,
      white var(--buff) calc(100% - var(--buff)),
      transparent
    );
  mask-composite: intersect;
}

.grid {
  --count: 6; /* The number of items you have */
  --inset: 0; /* Controls the grid animation offset on entry/exit */
  --outset: 2.5;
  --rotate: 1;
  height: 100%;
  width: 100%;
  margin: 0;
  list-style-type: none;
  position: relative;
  display: grid;
  padding: 0 1rem;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0 2rem;
  transition: transform 0.5s;
  /*	3D translation */
  transform: rotateX(calc(var(--rotate, 0) * 20deg))
    rotateZ(calc(var(--rotate, 0) * -20deg))
    skewX(calc(var(--rotate, 0) * 20deg));
}

.grid li {
  min-height: 100px;
  transform-style: preserve-3d;
  width: 100%;
  z-index: calc(1 + var(--active));
}
.grid li::before {
  content: '';
  position: absolute;
  inset: 4px 4px -2px -2px;
  border-radius: 6px;
  background: hsl(0 0% 0% / 0.1);
  filter: blur(calc(var(--active, 0) * 8px));
  z-index: -1;
  transition:
    scale var(--transition),
    opacity var(--transition),
    translate var(--transition),
    filter var(--transition);
  transform-origin: 50% 0;
  scale: 1 calc(1 + (var(--active, 0) * 0.05));
  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  box-shadow:
    0 0 #0000,
    0 0 #0000,
    var(--tw-shadow);
}

.grid:hover li {
  animation-play-state: paused;
}

.grid {
  transform-style: preserve-3d;
  gap: 1rem;
}

.item {
  align-items: center;
  background: hsl(0 0% 100%);
  border: 1px solid hsl(0 0% 90%);
  color: hsl(0 0% 10%);
  border-radius: 6px;
  cursor: pointer;
  display: flex;
  gap: 1rem;
  height: 100%;
  justify-content: center;
  overflow: hidden;
  padding: 1.25rem;
  text-align: center;
  width: 100%;
  transition:
    transform var(--transition),
    scale var(--transition),
    background-color 0.25s,
    color 0.25s,
    border 0.25s,
    box-shadow 0.25s;
  scale: calc(1 + (var(--active, 0) * 0.05));
  transform: translate3d(0, 0, calc(var(--active, 0) * 24px));
}

.item__icon img {
  max-height: 35px;
  height: 100%;
  width: 100%;
}
.item__text {
  flex: 1;
  text-align: center;
}

.grid li:nth-of-type(1) {
  --index: 0;
}
.grid li:nth-of-type(2) {
  --index: 0;
}
.grid li:nth-of-type(3) {
  --index: 1;
}
.grid li:nth-of-type(4) {
  --index: 1;
}
.grid li:nth-of-type(5) {
  --index: 2;
}
.grid li:nth-of-type(6) {
  --index: 2;
}
.grid li:nth-of-type(7) {
  --index: 3;
}
.grid li:nth-of-type(8) {
  --index: 3;
}
.grid li:nth-of-type(9) {
  --index: 4;
}
.grid li:nth-of-type(10) {
  --index: 4;
}
.grid li:nth-of-type(11) {
  --index: 5;
}
.grid li:nth-of-type(12) {
  --index: 5;
}

@container (width < 400px) {
  .header {
    grid-template: auto 1fr / 1fr;
  }
  .header a {
    justify-self: start;
  }
  .grid {
    --count: 12;
    --inset: 0;
    --outset: 3;
    grid-template-columns: 1fr;
  }

  .grid li:nth-of-type(1) {
    --index: 0;
  }
  .grid li:nth-of-type(2) {
    --index: 1;
  }
  .grid li:nth-of-type(3) {
    --index: 2;
  }
  .grid li:nth-of-type(4) {
    --index: 3;
  }
  .grid li:nth-of-type(5) {
    --index: 4;
  }
  .grid li:nth-of-type(6) {
    --index: 5;
  }
  .grid li:nth-of-type(7) {
    --index: 6;
  }
  .grid li:nth-of-type(8) {
    --index: 7;
  }
  .grid li:nth-of-type(9) {
    --index: 8;
  }
  .grid li:nth-of-type(10) {
    --index: 9;
  }
  .grid li:nth-of-type(11) {
    --index: 10;
  }
  .grid li:nth-of-type(12) {
    --index: 11;
  }

  .grid li {
    --duration: calc(var(--speed) * 2);
    --delay: calc((var(--duration) / var(--count)) * (var(--index, 0) - 8));
  }
}

.grid {
  gap: 0 2rem;
}

.grid li {
  --duration: calc(var(--speed) * 2);
  --delay: calc((var(--duration) / var(--count)) * (var(--index, 0) - 8));
  animation: slide var(--duration) var(--delay) infinite linear;
  translate: 0% calc(((var(--count) - var(--index)) + var(--inset, 0)) * 100%);
}
.grid li:hover {
  --active: 1;
}
@keyframes slide {
  100% {
    translate: 0% calc(calc((var(--index) + var(--outset, 0)) * -100%));
  }
}
